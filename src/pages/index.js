import Head from "next/head";
import "dayjs/locale/da";
import { Button, Center, Container, Flex, Grid, Select, Title } from "@mantine/core";
import { DatePicker } from "@mantine/dates";
import { IconArrowDown, IconClock } from "@tabler/icons-react";
import { rem } from "@mantine/core";
import { useEffect, useState } from "react";
import Link from "next/link";
import lokaler from "/public/lokaler";
import Lokalekort from "@/components/molecules/Lokalekort";
import useMyContext from "@/context/my-context";
import bookinglengths from "../../public/bookinglengths";
import timeslots from "../../public/timeslots";

export default function Home() {
    const {
        setStepperValue,
        bookingDate,
        setBookingDate,
        bookingStart,
        setBookingStart,
        bookingLength,
        setBookingLength,
    } = useMyContext();
    useEffect(() => {
        setStepperValue(0);
    });

    const [bookings, setBookings] = useState([]);
    const fetchData = async () => {
        try {
            const response = await fetch(
                "https://tytukeevrjivlptwlunf.supabase.co/rest/v1/bookings",
                {
                    headers: {
                        "Content-Type": "application/json",
                        apikey: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InR5dHVrZWV2cmppdmxwdHdsdW5mIiwicm9sZSI6ImFub24iLCJpYXQiOjE2OTk5OTM5NjcsImV4cCI6MjAxNTU2OTk2N30.W5cN_a05Nhs34WhIStNP8hv9H4_BjLxHdfJS4azZJ9Y",
                    },
                }
            );
            const newData = await response.json();
            const filteredData = newData.filter(
                (data) =>
                    data.date ===
                    `${bookingDate.getDate()}-${
                        bookingDate.getMonth() + 1
                    }-${bookingDate.getFullYear()}`
            );
            setBookings(filteredData);
        } catch (error) {
            toast.error("Kunne ikke indlæse bookings");
        }
    };
    useEffect(() => {
        fetchData();
    }, [bookingDate, bookingStart, bookingLength]);

    const filteredRooms = lokaler.map((room) => {
        const roomStartTime = parseInt(bookingStart, 10);
        const roomLength = parseInt(bookingLength, 10);
        const lastTimeslot = timeslots.length - 1;
        const remainingTimeslots = timeslots.slice(roomStartTime, lastTimeslot + 1);

        // Check if there are any conflicting bookings within the requested time frame
        let isAvailable = true;
        for (let i = 0; i < roomLength; i++) {
            if (
                !remainingTimeslots[i] ||
                bookings.some(
                    (booking) =>
                        booking.room === room.id &&
                        parseInt(booking.start, 10) <= roomStartTime + i &&
                        parseInt(booking.start, 10) + parseInt(booking.length, 10) >
                            roomStartTime + i
                )
            ) {
                isAvailable = false;
                break;
            }
        }

        room.available = isAvailable;
        return room;
    });

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                <Container>
                    <Center mt="lg">
                        <Title order={2}>Vælg tidspunkt</Title>
                    </Center>
                    <Grid p="lg">
                        <Grid.Col span={6}>
                            <Center>
                                <DatePicker
                                    locale="da"
                                    value={bookingDate}
                                    minDate={new Date()}
                                    allowDeselect={false}
                                    onChange={(value) => {
                                        setBookingDate(value);
                                    }}
                                />
                            </Center>
                        </Grid.Col>
                        <Grid.Col span={6}>
                            <Flex gap="md" direction="column">
                                <Select
                                    label="Se tider fra:"
                                    withAsterisk
                                    allowDeselect={false}
                                    description="Tidspunktet lokalet skal være ledigt fra"
                                    placeholder="Pick value"
                                    data={timeslots}
                                    value={bookingStart}
                                    onChange={(value) => {
                                        setBookingStart(value);
                                    }}
                                    leftSection={
                                        <IconClock
                                            style={{ width: rem(16), height: rem(16) }}
                                            stroke={1.5}
                                        />
                                    }
                                />
                                <Select
                                    label="Tidsinterval:"
                                    withAsterisk
                                    allowDeselect={false}
                                    description="Hvor lang tid vil du gerne booke lokalet"
                                    placeholder="Pick value"
                                    data={bookinglengths}
                                    value={bookingLength}
                                    onChange={(value) => {
                                        setBookingLength(value);
                                    }}
                                    leftSection={
                                        <IconClock
                                            style={{ width: rem(16), height: rem(16) }}
                                            stroke={1.5}
                                        />
                                    }
                                />
                                <Center>
                                    <Link href="#lokaler">
                                        <Button
                                            rightSection={
                                                <IconArrowDown
                                                    style={{ width: rem(16), height: rem(16) }}
                                                    stroke={1.5}
                                                />
                                            }>
                                            Søg lokaler
                                        </Button>
                                    </Link>
                                </Center>
                            </Flex>
                        </Grid.Col>
                    </Grid>
                    <Center mt="lg" id="lokaler">
                        <Title order={2}>Vælg lokaler</Title>
                    </Center>
                    <Grid p="lg">
                        {filteredRooms.map((room) => (
                            <Grid.Col span="4" key={room.id}>
                                <Lokalekort room={room} />
                            </Grid.Col>
                        ))}
                    </Grid>
                </Container>
            </main>
        </>
    );
}
